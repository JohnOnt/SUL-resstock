require './my_time.rb'
require './schedule_modifier'

class Sch
  attr_reader :times
  attr_reader :values
  attr_writer :times
  attr_writer :values

  def initialize(times, values)
      @times = times.clone
      @values = values.clone
  end
end

def test_get_cluster()
  #testing
  times_values_peak_answercluster_array = [
    [
      ['24:00:00'],
      [0.0],
      [7,9],
      [],
      []
    ],
    [
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0],
      [7,9],
      [],
      []
    ],
    [
      ['00:00:00','03:00:00','24:00:00'],
      [0.0, 1.0,0.0],
      [2,5],
      [['00:00:00',0.0],['03:00:00',1.0]],
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','15:40:00','15:50:00','24:00:00'],
      [ 0.0      , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377, 0.0       , 0.0351558, 0.0],
      [7,9],
      [['07:00:00',0],['07:30:00',0.05],['08:00:00',0.0],['08:10:00',0.0422513],['08:20:00',0.139377]],
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00', '09:50:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       , 0.05     , 0.0      , 0.0422513,  0.139377, 0.2123    ,0.0, 0.0351558, 0.0],
      [7,9],
      [['07:00:00',0],['07:30:00',0.05],['08:00:00',0.0],['08:10:00',0.0422513],['08:20:00',0.139377],['09:50:00', 0.2123]],
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0,0.05,0.0,0.05,0.0, 0.0422513, 0.139377, 0.0, 0.0351558, 0.0],
      [9,13],
      [],
      []
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','12:00:00','12:10:00','12:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       ,0.05      ,0.0       , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
      [7,9],
      [['07:00:00',0.0],['07:30:00',0.05]],
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','10:50:00','11:10:00','12:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       ,0.05      ,0.0       , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
      [7,11],
      [['07:00:00',0.0],['07:30:00',0.05],['10:50:00',0.0],['11:10:00', 0.0422513],['12:20:00',0.139377]],
    ],
    [
      ['03:00:00','03:10:00','08:10:00','08:30:00','9:00:00','9:30:00','9:50:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       ,0.05      ,0.0      , 0.042251,0.139377 , 0.0      , 0.0351558, 0.0],
      [8,9],
      [['08:10:00',0.0],['08:30:00',0.05]],
    ]
  ]
  puts("testing get_cluster... ")
  pass_count  = 0
  times_values_peak_answercluster_array.each_with_index do |test_case, index|
    times = test_case[0]
    times = times.map{|x| MyTime.new(x)}
    values = test_case[1]
    test_sch = Sch.new(times, values)
    peak = test_case[2]
    answer_cluster = test_case[3]
    acluster = get_cluster(test_sch, peak, after_margin=0)
    new_a_cluster = acluster.map{|x| [x[0].to_s,x[1]]}
    if not (new_a_cluster == answer_cluster)
      puts("****Test #{index} failed***")
      puts("Testing with: #{times} and #{values} and #{peak}")
      puts("Expecting #{answer_cluster}")
      puts("Got #{new_a_cluster}")
      puts("********")
    else
      puts("Test #{index} passed")
      pass_count += 1
    end
  end
  if times_values_peak_answercluster_array.length == pass_count
    puts("All #{times_values_peak_answercluster_array.length} test passed.")
  else
    puts("#{times_values_peak_answercluster_array.length - pass_count} tests failed")
  end

end

#test_get_cluster

#def move_cluster(sch, cluster_times, distance, timeClass)

def test_move_cluster()
  #testing
  times_values_peak_distance_answertimes = [
    [
      ['24:00:00'],
      [0.0],
      [7,9],
      120,
      ['24:00:00'],
      [0.0]
    ],
    [
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0],
      [7,9],
      120,
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0]
    ],
    [
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0],
      [2,5],
      120,
      ['02:00:00','05:00:00', '24:00:00'],
      [0.0,1.0,0.0]
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
      [7,9],
      120,
      ['03:00:00','03:10:00','09:00:00','09:30:00','10:00:00','10:10:00','10:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0]
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','9:30:00','10:00:00','15:40:00','15:50:00','24:00:00'],
      [0.0       , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377 , 0.0     , 0.05     ,0.0,     0.0351558, 0.0],
      [7,9],
      180,
      ['03:00:00','03:10:00','09:30:00','10:00:00','10:30:00','11:00:00','11:10:00','11:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       , 0.05     , 0.0     , 0.05     , 0.05     , 0.0      , 0.0422513, 0.139377 ,0.0       , 0.0351558, 0.0]
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','9:30:00','10:00:00','15:40:00','15:50:00','24:00:00'],
      [0.0       , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377 , 0.5     , 0.05     ,0.0,     0.0351558, 0.0],
      [7,9],
      180,
      ['03:00:00','03:10:00','10:00:00','10:30:00','11:00:00','11:10:00','11:20:00','12:30:00','13:00:00','15:40:00','15:50:00','24:00:00'],
      [0.0       , 0.05     , 0.0     , 0.05     , 0.0       , 0.0422513, 0.139377 ,0.5       ,0.05      , 0.0      , 0.0351558, 0.0],
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0,0.05,0.0,0.05,0.0, 0.0422513, 0.139377, 0.0, 0.0351558, 0.0],
      [9,13],
      120,
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0,0.05,0.0,0.05,0.0, 0.0422513, 0.139377, 0.0, 0.0351558, 0.0]
    ],
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','12:00:00','12:10:00','12:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       ,0.05      ,0.0       , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
      [7,9],
      120,
      ['03:00:00','03:10:00','09:00:00','09:30:00','12:00:00','12:10:00','12:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       ,0.05      ,0.0       , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0]
    ]
  ]
  puts("testing get_move_cluster... ")
  pass_count  = 0
  times_values_peak_distance_answertimes.each_with_index do |test_case, index|
    times = test_case[0]
    times = times.map{|x| MyTime.new(x)}
    values = test_case[1]
    test_sch = Sch.new(times, values)
    peak = test_case[2]
    distance = test_case[3]
    answer_times = test_case[4]
    answer_values = test_case[5]
    cluster = get_cluster(test_sch, peak, after_margin=0)
    puts("Testing with: #{times} and #{values} and #{peak}")
    puts("Got cluster #{cluster}")
    puts("Attempting to move #{cluster} through #{distance}")
    puts("Expecting #{answer_times}")
    raw_atimes, raw_values = cluster.transpose
    puts("Got cluster times #{raw_atimes}")
    new_sch_times, new_sch_values = move_cluster(test_sch, raw_atimes, distance, MyTime)
    new_sch = Sch.new(new_sch_times, new_sch_values)
    atimes = new_sch.times.map{|x| x.to_s}
    avalues = new_sch.values
    puts("After moving: \n Got Times: #{atimes} \n Exp Times: #{answer_times}")
    puts("After moving: \n Got Values: #{avalues} \n Exp Values: #{answer_values}")
    if not (atimes == answer_times and avalues == answer_values)
      puts("****Test #{index} failed***")      
      puts("********")
    else
      puts("Test #{index} passed")
      pass_count += 1
    end
  end
  if times_values_peak_distance_answertimes.length == pass_count
    puts("All #{times_values_peak_distance_answertimes.length} test passed.")
  else
    puts("#{times_values_peak_distance_answertimes.length - pass_count} tests failed")
  end
end

#test_move_cluster
#dodge_peaks(sch, all_peaks, timeClass)

def test_dodge_peaks()
  #testing
  times_values_peaks_answertimes = [
    #test0
    [
      ['24:00:00'],
      [0.0],
      [[7,9]],
      ['24:00:00'],
      [0.0]
    ],
    #test1
    [
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0],
      [[7,9]],
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0]
    ],
    #test2
    [
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0],
      [[2,5]],
      ['05:00:00','08:00:00', '24:00:00'],
      [0.0,1.0,0.0]
    ],
     #test3
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','15:40:00','15:50:00','24:00:00'],
      [ 0.0      , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377 , 0.0      ,0.0351558 , 0.0],
      [[7,9]],
      ['03:00:00','03:10:00','09:00:00','09:30:00','10:00:00','10:10:00','10:20:00','15:40:00','15:50:00','24:00:00'],
      [ 0.0      , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377 , 0.0      ,0.0351558 , 0.0],
    ],
     #test4
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','15:40:00','15:50:00','24:00:00'],
      [ 0.0      , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
      [[9,13]],
      ['03:00:00','03:10:00','07:00:00','07:30:00','08:00:00','08:10:00','08:20:00','15:40:00','15:50:00','24:00:00'],
      [ 0.0      , 0.05     , 0.0      , 0.05     , 0.0      , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
    ],
     #test5
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','12:00:00','12:10:00','12:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       ,0.05      ,0.0       , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
      [[7,9]],
      ['03:00:00','03:10:00','09:00:00','09:30:00','12:00:00','12:10:00','12:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       ,0.05      ,0.0       , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
    ],
     #test6
    [
      ['03:00:00','03:10:00','07:00:00','07:30:00','10:20:00','10:50:00','11:10:00','12:20:00','15:40:00','15:50:00','24:00:00'],
      [0.0       ,0.05      ,0.0       ,0.05      ,0.0       , 0.1      , 0.0422513, 0.139377 , 0.0      , 0.0351558, 0.0],
      [[7,11]],
      ['03:00:00','03:10:00','15:40:00','15:50:00','16:20:00','19:10:00','19:40:00','20:00:00','21:10:00','24:00:00'],
      [0.0       ,0.05      ,0.0      , 0.0351558 , 0.05      ,0.0       , 0.1      ,0.0422513, 0.139377,  0.0],

    ],
     #test7
    [
      ['05:00:00','05:10:00','05:20:00','05:30:00','10:00:00','10:10:00','10:20:00','19:00:00','19:10:00','20:10:00','20:20:00','21:30:00','21:40:00','24:00:00'],
      [0.0       , 0.0062714, 0.086794 , 0.0340302, 0.0      , 0.0069146, 0.1094272, 0.0      , 0.0524824, 0.0      , 0.0193769, 0.0      , 0.0743518, 0.0],
      [[5,9],[18,22]],
      ['09:00:00','09:10:00','09:20:00','09:30:00','10:00:00','10:10:00','10:20:00','15:20:00','15:30:00','16:30:00','16:40:00','17:50:00','18:00:00','24:00:00'],
      [0.0       , 0.0062714, 0.086794 , 0.0340302, 0.0      , 0.0069146, 0.1094272, 0.0      , 0.0524824, 0.0      , 0.0193769, 0.0      , 0.0743518, 0.0]
    ],
     #test8
     [
      ['05:00:00','05:10:00','05:20:00','06:30:00','11:00:00','11:10:00','11:20:00','19:00:00','19:10:00','20:10:00','20:20:00','21:30:00','21:40:00','24:00:00'],
      [0.0       , 0.0062714, 0.086794 , 0.0340302, 0.0      , 0.0069146, 0.1094272, 0.0      , 0.0524824, 0.0      , 0.0193769, 0.0      , 0.0743518, 0.0],
      [[5,9],[10,12]],
      ['03:30:00','03:40:00','03:50:00','05:00:00','12:00:00','12:10:00','12:20:00','19:00:00','19:10:00','20:10:00','20:20:00','21:30:00','21:40:00','24:00:00'],
      [0.0       , 0.0062714, 0.086794 , 0.0340302, 0.0      , 0.0069146, 0.1094272, 0.0      , 0.0524824, 0.0      , 0.0193769, 0.0      , 0.0743518, 0.0]
    ],
     #test9
    [
      ['05:00:00','05:10:00','05:20:00','05:30:00','06:30:00','10:00:00','10:10:00','11:00:00','19:00:00','19:10:00','20:10:00','20:20:00','21:30:00','21:40:00','24:00:00'],
      [ 0.0      , 0.0062714, 0.086794 , 0.0340302, 0.02313  , 0.0      , 0.0069146, 0.1094272, 0.0      , 0.0524824, 0.0      , 0.0193769, 0.0      , 0.0743518, 0.0],
      [[5,9],[18,22]],
      ['10:00:00','10:10:00','11:00:00', '11:10:00','11:20:00','11:30:00','12:30:00', '15:20:00','15:30:00','16:30:00','16:40:00','17:50:00','18:00:00','24:00:00'],
      [ 0.0      , 0.0069146, 0.1094272, 0.0062714, 0.086794 , 0.0340302 , 0.02313  ,  0.0      , 0.0524824, 0.0      , 0.0193769, 0.0      , 0.0743518, 0.0]
    ]
  ]
  puts("testing dodge_peaks... ")
  pass_count  = 0
  times_values_peaks_answertimes.each_with_index do |test_case, index|
    times = test_case[0]
    times = times.map{|x| MyTime.new(x)}
    values = test_case[1]
    peaks = test_case[2]
    answer_times = test_case[3]
    answer_values = test_case[4]
    puts("Testing with #{times}, #{values}")
    test_sch = Sch.new(times, values)

    def dodge_peaks(sch, all_peaks, timeClass)
      all_peaks.each do |peak|
        puts("Passing schedule: #{sch.times},#{sch.values} to dodge peak")
        new_times, new_vals = dodge_peak(sch, peak, all_peaks, timeClass)
        puts("Getting schedule: #{new_times},#{new_vals} from dodge peak")
        sch = Sch.new(new_times, new_vals)
      end
      return sch.times, sch.values
    end    

    new_sch_times, new_sch_values = dodge_peaks(test_sch, peaks, MyTime)
    new_sch = Sch.new(new_sch_times, new_sch_values)
    atimes = new_sch.times.map{|x| x.to_s}
    avalues = new_sch.values
    puts("After dodging: \n Got Times: #{atimes} \n Exp Times: #{answer_times}")
    puts("After dodging: \n Got Values: #{avalues} \n Exp Values: #{answer_values}")
    if not (atimes == answer_times and avalues == answer_values)
      puts("****Test #{index} failed***")
    else
      puts("Test #{index} passed")
      pass_count += 1
    end
  end
  if times_values_peaks_answertimes.length == pass_count
    puts("All #{times_values_peaks_answertimes.length} test passed.")
  else
    puts("#{times_values_peaks_answertimes.length - pass_count} tests failed")
  end
end

#test_dodge_peaks

def test_shift_peak_to_take()
  #testing
  times_values_peaks_take_answertimes_answervals = [
    #test0
    [
      ['24:00:00'],
      [0.0],
      [7,9],
      [1,5],
      ['24:00:00'],
      [0.0]
    ],
    #test1
    [
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0],
      [7,9],
      [1,5],
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0]
    ],
    #test2
    [
      ['00:00:00','03:00:00','24:00:00'],
      [0.0,1.0,0.0],
      [2,5],
      [6,8],
      ['00:00:00','02:00:00', '06:00:00','08:00:00','24:00:00'],
      [ 0.0,       1.0,        0.0,       0.5,       0.0]
    ],
     #test3
     [
      ["03:00:00", "04:00:0", "05:00:00", "06:00:00", "07:00:00", "08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00", "17:00:00", "18:00:00", "19:00:00", "20:00:00", "21:00:00", "24:00:00"],
      [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2],
      [15,19],
      [1,5],
      ["01:00:00", "03:00:00", "04:00:00", "05:00:00", "06:00:00", "07:00:00", "08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "19:00:00", "20:00:00", "21:00:00", "24:00:00"],
      [1,           2.5        ,3.5       ,2.5         ,2         ,1          ,2          ,1          ,2          ,1          ,2          ,1          ,2          ,1          ,0          ,2          ,1          ,2]
     ],
     #test4
     [
       ["14:00:00","15:00:00","17:00:00","18:00:00","19:00:00","23:00:00","24:00:00"],
       [0         , 1        , 0        , 1        , 0        , 1        , 0],
       [15,19],
       [1,5],
       ["01:00:00", "05:00:00", "14:00:00","15:00:00","19:00:00","23:00:00","24:00:00"],
       [0         , 0.25      , 0         , 1        , 0        , 1        , 0]

     ],
     #test5
     [
      ["14:00:00","15:00:00","16:00:00","19:00:00","23:00:00","24:00:00"],
      [0         , 1        , 2        , 0        , 1        , 0],
      [15,19],
      [1,5],
      ["01:00:00", "05:00:00", "14:00:00","15:00:00","19:00:00","23:00:00","24:00:00"],
      [0         , 0.5       , 0         , 1        , 0        , 1        , 0]

    ]

  ]
  puts("testing test_shift_peak_to_take... ")
  pass_count  = 0
  times_values_peaks_take_answertimes_answervals.each_with_index do |test_case, index|
    times = test_case[0]
    times = times.map{|x| MyTime.new(x)}
    values = test_case[1]
    peak = test_case[2]
    take = test_case[3]
    answer_times = test_case[4]
    answer_values = test_case[5]
    puts("Testing with #{times}, #{values}")
    puts("With peak #{peak} and take #{take}")
    test_sch = Sch.new(times, values)
    new_sch_times, new_sch_values = shift_peak_to_take(test_sch, peak, take, MyTime)
    new_sch = Sch.new(new_sch_times, new_sch_values)
    atimes = new_sch.times.map{|x| x.to_s}
    avalues = new_sch.values
    puts("After shifting: \n Got Times: #{atimes} \n Exp Times: #{answer_times}")
    puts("After shifting: \n Got Values: #{avalues} \n Exp Values: #{answer_values}")
    if not (atimes == answer_times and avalues == answer_values)
      puts("****Test #{index} failed***")
    else
      puts("Test #{index} passed")
      pass_count += 1
    end
  end
  if times_values_peaks_take_answertimes_answervals.length == pass_count
    puts("All #{times_values_peaks_take_answertimes_answervals.length} test passed.")
  else
    puts("#{times_values_peaks_take_answertimes_answervals.length - pass_count} tests failed")
  end
end

test_shift_peak_to_take